function [estPosition, estAngle, botGhost] = Localize(nxt, numParticles, plotMe)

map=nxt.map;

numScans = 4;
numScansFull = 32;
startAngle = 0;
endAngle = ((numScans-1)*2*pi)/numScans;  
angles = (startAngle:(endAngle - startAngle)/(numScans-1):endAngle);
scanLines =  [cos(angles); sin(angles)]'*100;
scanOffSet = [0, 0];
converged = 0;
dampeningFact = 0.0000000001;
redistPercentage = 0.75;
sensorNoise = 1; 
isOrthog = 0;

particles(numParticles,1) = BotSim; %how to set up a vector of objects
for i = 1:numParticles
    particles(i) = BotSim(map);  %each particle should use the same map as the botSim object
    particles(i).setScanConfig(scanLines,scanOffSet);
    particles(i).setSensorNoise(0);
    particles(i).setMotionNoise(0);
    particles(i).setTurningNoise(0);
    particles(i).randomPose(5); %spawn the particles in random locations
    particles(i).setBotAng(floor(rand*4)*pi/2);
end

newParticles(numParticles,1) = BotSim; 
for i = 1:numParticles
    newParticles(i) = BotSim(map);  %each particle should use the same map as the botSim object
    newParticles(i).setScanConfig(scanLines,scanOffSet);
    newParticles(i).setSensorNoise(0);
    newParticles(i).setMotionNoise(0);
    newParticles(i).setTurningNoise(0);
    newParticles(i).randomPose(5); %spawn the particles in random locations
    newParticles(i).setBotAng(floor(rand*4)*pi/2);
end



prevPow = nxt.pUltra;
nxt.pUltra = 25;
scanA = nxt.rotScan(72);
[angleToTurn, botScan] = orthoScans(scanA);
%nxt.turn(angletoTurn);
while (sum(botScan < 9) > 0)
    scanA = nxt.rotScan(72);
    [angleToTurn, botScan] = orthoScans(scanA);
end
dangerZone = false;
if ((40<(botScan(1)+botScan(3)) && (botScan(1)+botScan(3))<50)&&(100<(botScan(2)+botScan(4)) && (botScan(2)+botScan(4))<110))
    if (44<botScan(2) && botScan(2)<61)&&(44<botScan(4) && botScan(4)<61)
        dangerZone = true;
    end
end
nxt.pUltra = prevPow;

if ((40<(botScan(2)+botScan(4)) && (botScan(2)+botScan(4))<50)&&(100<(botScan(1)+botScan(3)) && (botScan(1)+botScan(3))<110))
    if (44<botScan(1) && botScan(1)<61)&&(44<botScan(3) && botScan(3)<61)
        dangerZone = true;
    end
end

[a,b] = max(botScan);
ang = mod(angleToTurn + (b-1)*pi/2, 2*pi);
if ang > pi
    ang = ang - 2*pi; 
end

if dangerZone == true
    nxt.turn(ang)
    nxt.move(max(botScan)-15)
end


end